use crate::ast::{Operator, Variable, Sentence};
use std::str::FromStr;

grammar;

LABEL = "LABEL";
FUNC = "FUNCTION";

GOTO = "GOTO";
IF = "IF";
RETURN = "RETURN";
DEC = "DEC";
ARG = "ARG";
CALL = "CALL";
PARAM = "PARAM";
READ = "READ";
WRITE = "WRITE";

COLON = ":";
ASSIGN = ":=";

ID =  r"[a-z]\w*";

Number: u32 = {
    r"\d+" => u32::from_str(&<>).unwrap()
}

ArithOpt: Operator = {
    "+" => Operator::Plus,
    "-" => Operator::Sub,
    "*" => Operator::Mul,
    "/" => Operator::Div,
}

RelOpt: Operator = {
    "==" => Operator::Equal,
    ">" => Operator::Greater,
    "<" => Operator::Less,
    ">=" => Operator::GreaterEqual,
    "<=" => Operator::LessEqual,
}

pub (crate) Label: &'input str = {
    ID => <>
}

pub (crate) Var: Variable<'input> = {
    r"#\d+" => Variable::Number(u32::from_str(&<>[1..]).unwrap()),
    r"&[a-z]\w*" => Variable::Pointer(&<>[1..]),
    r"\*[a-z]\w*" => Variable::Deref(&<>[1..]),
    Label => Variable::Id(<>),
}

pub Sentence: Sentence<'input> = {
    // label
    LABEL <Label> COLON         => Sentence::Label(<>),
    FUNC <Label> COLON          => Sentence::Func(<>),
    // assign
    <target: Var> ASSIGN <var: Var>    => Sentence::Assign{<>},
    <target: Var> ASSIGN <l: Var> <opt: ArithOpt> <r: Var> 
                                => Sentence::Arith{<>},
    <target: Var> ASSIGN CALL <func: Label>                
                                => Sentence::Call{<>},
    // condition
    GOTO <Label>                => Sentence::Goto(<>),
    IF <l: Var> <opt: RelOpt> <r: Var> GOTO <label: Label> 
                                => Sentence::IfGoto{<>},
    // function
    RETURN <Var>                => Sentence::Return(<>),
    ARG <Var>                   => Sentence::Arg(<>),
    PARAM <Var>                 => Sentence::Param(<>),
    // array
    DEC <target: Var> <size: Number> 
                                => Sentence::Dec{<>},
    // io
    READ <Var>                  => Sentence::Read(<>),
    WRITE <Var>                 => Sentence::Write(<>),
}